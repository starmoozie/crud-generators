<?php

namespace DummyNamespace;

use App\Http\Requests\DummyClassRequest;
use Starmoozie\CRUD\app\Http\Controllers\CrudController;
use Starmoozie\CRUD\app\Library\CrudPanel\CrudPanelFacade as CRUD;

/**
 * Class DummyClassCrudController
 * @package App\Http\Controllers\Admin
 * @property-read \Starmoozie\CRUD\app\Library\CrudPanel\CrudPanel $crud
 */
class DummyClassCrudController extends CrudController
{
    use \Starmoozie\CRUD\app\Http\Controllers\Operations\ListOperation;
    use \Starmoozie\CRUD\app\Http\Controllers\Operations\CreateOperation;
    use \Starmoozie\CRUD\app\Http\Controllers\Operations\UpdateOperation;
    use \Starmoozie\CRUD\app\Http\Controllers\Operations\DeleteOperation;
    use \Starmoozie\CRUD\app\Http\Controllers\Operations\ShowOperation;

    // Global Columns
    use \Starmoozie\CRUD\app\Http\Controllers\Traits\GlobalColumns;

    /**
     * Configure the CrudPanel object. Apply settings to all operations.
     * 
     * @return void
     */
    public function setup()
    {
        CRUD::setModel(\App\Models\DummyClass::class);
        CRUD::setRoute(config('starmoozie.base.route_prefix') . '/dummy_class');
        CRUD::setEntityNameStrings('dummy_class', 'dummy_class');
    }

    /**
     * Define what happens when the List operation is loaded.
     * 
     * @return void
     */
    protected function setupListOperation()
    {
        CRUD::setFromDb(); // columns

        /**
         * Columns can be defined using the fluent syntax or array syntax:
         * User CRUD::addColumn/s or $this->crud->addColumn/s
         * - CRUD::column('price')->type('number')->label('Price');
         * - CRUD::addColumn(['name' => 'price', 'type' => 'number']); 
         * - CRUD::addColumns([['name' => 'price', 'type' => 'number'],['name' => 'qty', 'type' => 'number']]);
         */
    }

    /**
     * Define what happens when the Create operation is loaded.
     * 
     * @return void
     */
    protected function setupCreateOperation()
    {
        CRUD::setValidation(DummyClassRequest::class);

        CRUD::setFromDb(); // fields

        /**
         * Fields can be defined using the fluent syntax or array syntax:
         * User CRUD::addField/s or $this->crud->addField/s
         * - CRUD::field('price')->type('number')->label('Price');
         * - CRUD::addField(['name' => 'price', 'type' => 'number', 'label' => 'Price'])); 
         * - CRUD::addFields([['name' => 'price', 'type' => 'number', 'label' => 'Price'],['name' => 'qty', 'type' => 'number', 'label' => 'QTY']]);
         */
    }

    /**
     * Define what happens when the Update operation is loaded.
     * 
     * @return void
     */
    protected function setupUpdateOperation()
    {
        $this->setupCreateOperation();
    }

    /**
     * Define what happens when the Show operation is loaded.
     * 
     * @return void
     */
    protected function setupShowOperation()
    {
        // $this->crud->set('show.setFromDb', false);

        /**
         * Columns can be defined using the fluent syntax or array/s syntax:
         * User CRUD::addColumn/s or $this->crud->addColumn/s
         * - CRUD::column('created_at')->type('datetime')->label('Created');
         * - CRUD::addColumn(['name' => 'created_at', 'type' => 'datetime']); 
         * - CRUD::addColumns([['name' => 'created_at', 'type' => 'datetime']]);
         * 
         * To remove column
         * - $this->crud->removeColumn('price');
         */
    }
}
